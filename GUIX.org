#+TITLE:     Guix: Setup Scimax
#+AUTHOR:    David Conner
#+EMAIL:     aionfork@gmail.com
#+DESCRIPTION: notes
#+property: header-args        :tangle-mode (identity #o640) :mkdirp yes
#+property: header-args:sh     :tangle-mode (identity #o750) :mkdirp yes
#+property: header-args:bash   :tangle-mode (identity #o750) :mkdirp yes

* Org Babel

Noweb is confusing yes. Most of the =noweb-ref= can be avoided if it's set as an
environment variable in =.profile=.

** Noweb Templates

The scimax installation directory

#+begin_src emacs-lisp :noweb-ref emacs-scimax
.emacs.scimax
#+end_src

The name of the scimax profile

#+begin_src emacs-lisp :noweb-ref scimax-profile
scimax
#+end_src

The Guix manifest file for the scimax profile

#+begin_src emacs-lisp :noweb-ref scimax-manifest
scimax.scm
#+end_src

* Guix

Since scimax uses =use-package= then the installed packages will go in
=user-emacs-directory=. For now, only the emacs binary and a few basic packages
are in the =scimax.scm= manifest.

#+begin_src scheme :tangle scimax.scm
(specifications->manifest
  '("nss-certs"
    "emacs-next-pgtk"
    "git"
    "git:send-email"

    ;; "emacs-zmq"

    "aspell"
    "aspell-dict-en"

    "font-juliamono"
    "font-google-noto"
    "font-google-noto-emoji"))
#+end_src

** Updater

This script will update the Guix profile.

#+begin_src sh :tangle ~/.bin/update-scimax :noweb yes :shebang #!/bin/sh
guix_manifest_dir="$XDG_CONFIG_HOME/guix/manifests"
scimax_manifest="$HOME/<<emacs-scimax>>/<<scimax-manifest>>"
# echo $emacsg_manifest
cp "$scimax_manifest" "$guix_manifest_dir"

# run `activate-profiles <<scimax-profile>>` the first time
# or install manually with `guix package ...`
update-profiles <<scimax-profile>>
#+end_src

Running =update-profiles= requires an additional script from
[[github:dcunited001/ellipsis][dcunited001/ellipsis]] or [[github:daviwil/dotfiles][daviwil/dotfiles]]. It's basically equivalent to running
the following where =$substitutes= is a list of Guix substitute servers

#+begin_example sh
# substitutes="https://ci.guix.gnu.org https://bordeaux.guix.gnu.org https://substitutes.nonguix.org"
# GUIX_EXTRA=~/.guix-extra-profiles
# GUIX_MANIFESTS=$XDG_CONFIG_HOME/guix/manifests
guix package --profile="$GUIX_EXTRA/$profileName/$profileName" --manifest="$GUIX_MANIFESTS/$profileName.scm" --substitute-urls="$substitutes" $@
#+end_example

If you're using those scripts, activating the profile for the first time
req. using =activate-profiles scimax=. If you use Guix home, then you'll
circumvent most of the need for them, but there's quite bit of overhead esp. if
a similar codebase for Guix Home should support both Arch and Guix System.

** Launcher

Starting scimax without systemd

#+begin_src sh :tangle ~/.bin/scimax :noweb yes :shebang #!/bin/sh
export GUIX_SOURCE=$_ECTO/guix/guix
export EMACS_SOURCE=$_ECTO/emacs/emacs/src
export SCIMAX_PROFILE=$GUIX_EXTRA/<<scimax-profile>>/<<scimax-profile>>

guix shell -E "^EMAIL$" \
     -E 'EMACS_SOURCE' \
     -E 'GUIX_SOURCE' \
     -p "$SCIMAX_PROFILE" -- \
     emacs --with-profile "<<scimax-profile>>" "$@"
#+end_src


Starting scimax-client

#+begin_src sh :tangle ~/.bin/scimaxclient :noweb yes :shebang #!/bin/sh
export SCIMAX_PROFILE=$GUIX_EXTRA/<<scimax-profile>>/<<scimax-profile>>

guix shell -E "^EMAIL$" \
     -p "$SCIMAX_PROFILE" -- \
     emacsclient -c "$@"

#+end_src

*** Systemd Unit

The environment variables need to be set up in =.profile=. The =Environment=
declarations here can't have =$GUIX_EXTRA= as a variable reference.

+ A second systemd unit needs to be set up to run with =--debug-init=
+ This doesn't handle creating a second =emacs-server=

#+begin_src conf :tangle ~/.local/share/systemd/user/scimax-arch.service :noweb yes
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/
StartLimitIntervalSec=300
StartLimitBurst=3

#--search-paths is diagnostic (output only)
#--network is only necessary for containers

[Service]
Type=simple
Environment=EMAIL=aionfork@gmail.com
Environment=SSH_AUTH_SOCK=/run/user/1000/gnupg/S.gpg-agent.ssh
Environment=GUIX_SOURCE=/data/ecto/guix/guix
Environment=EMACS_SOURCE=/data/ecto/emacs/emacs/src
#Environment=GUIX_EXTRA=/home/user/.guix-extra-profiles

#Type=notify #requires Notify
ExecStart=/bin/bash -c \
"guix shell -E '^EMAIL$' \
-E 'EMACS_SOURCE' \
-E 'GUIX_SOURCE' \
-p $GUIX_EXTRA/<<scimax-profile>>/<<scimax-profile>> -- \
emacs --fg-daemon"
ExecStartPre=/bin/bash -c "notify-send 'Starting Emacs Service...'"
ExecStartPost=/bin/bash -c "notify-send 'Emacs Service Started Successfully'"

ExecStop=/bin/bash -c "guix shell -p $GUIX_EXTRA/<<scimax-profile>>/<<scimax-profile>> -- emacsclient -e '(kill-emacs)'"
ExecStopPost=/bin/bash -c "notify-send 'Emacs Service Stopped Successfully'"

Restart=on-failure
RestartSec=30

# straight can take awhile
TimeoutStartSec=300

# Emacs will exit with status 15 after having received SIGTERM, which
# is the default "KillSignal" value systemd uses to stop services.
SuccessExitStatus=15

[Install]
WantedBy=default.target
#+end_src

*** Shepherd Service

***** TODO document an emacs service running under shepherd

* Emacs

** Chemacs

Add an entry to =.emacs.profiles.el= to load the profile with chemacs.

#+begin_example emacs-lisp
(("default" . ((user-emacs-directory . "~/.emacs.doom")))
 ("doom" . ((user-emacs-directory . "~/.emacs.doom")))
 ("guix" . ((user-emacs-directory . "~/.emacs.g")))
 ("vanilla" . ((user-emacs-directory . "~/.emacs.vanilla")))
 ;; ("<<scimax-profile>>" . ((user-emacs-directory . "~/<<emacs-scimax>>")))
 ("scimax" . ((user-emacs-directory . "~/.emacs.scimax")))
 ("network" . ((user-emacs-directory . "~/.emacs.network"))))
#+end_example

Set =.emacs.profile= to "scimax" if you want it to be default. However, if you
are installing the emacs environment with Guix, then emacs and its client must
be launched with =guix shell=

** MELPA

Once started the =init.el= will begin contacting ELPA to download and compile
dependencies.


* Jupyter

**
